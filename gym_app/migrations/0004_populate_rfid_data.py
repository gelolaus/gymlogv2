# Generated by Django 4.2.7 on 2025-08-19 09:56

from django.db import migrations
import json
import os


def populate_rfid_data(apps, schema_editor):
    """
    Populate RFID data from the JSON mapping file.
    Only updates students that exist in the database.
    """
    Student = apps.get_model('gym_app', 'Student')
    
    # Get the path to the RFID mapping file
    current_dir = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    rfid_file_path = os.path.join(current_dir, 'RFID_stuff', 'rfid_mapping_only.json')
    
    if not os.path.exists(rfid_file_path):
        print(f"Warning: RFID mapping file not found at {rfid_file_path}")
        return
    
    # Load the RFID mapping data
    try:
        with open(rfid_file_path, 'r', encoding='utf-8') as file:
            rfid_data = json.load(file)
    except Exception as e:
        print(f"Error reading RFID mapping file: {e}")
        return
    
    # Create a mapping dictionary from student_id to rfid
    rfid_mapping = {}
    for entry in rfid_data:
        student_id = entry.get('student_id', '').strip()
        rfid = entry.get('rfid', '').strip()
        
        if student_id and rfid:
            # Clean up any special characters in RFID
            rfid = rfid.lstrip('*').lstrip('.')
            rfid_mapping[student_id] = rfid
    
    # Update students with their RFID values
    students_updated = 0
    students_in_db = Student.objects.all()
    
    for student in students_in_db:
        if student.student_id in rfid_mapping:
            student.rfid = rfid_mapping[student.student_id]
            student.save()
            students_updated += 1
    
    print(f"Updated {students_updated} students with RFID data out of {len(students_in_db)} total students in database")


def reverse_populate_rfid_data(apps, schema_editor):
    """
    Reverse operation - clear all RFID data
    """
    Student = apps.get_model('gym_app', 'Student')
    Student.objects.update(rfid=None)
    print("Cleared all RFID data")


class Migration(migrations.Migration):

    dependencies = [
        ('gym_app', '0003_add_rfid_field'),
    ]

    operations = [
        migrations.RunPython(populate_rfid_data, reverse_populate_rfid_data),
    ]
